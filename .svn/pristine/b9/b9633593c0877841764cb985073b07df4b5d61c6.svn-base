using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Forms;

using System.Xml;
using System.IO;

namespace WpfVideoUploader
{
    /// <summary>
    /// Interaction logic for VideoInfo.xaml
    /// </summary>
    public partial class VideoInfo : Window
    {
        private string _vehiclekey = string.Empty;
        private string _vehicleIndex = string.Empty;
        private string _videoGUID = string.Empty;
        public string VideoFileName = string.Empty;
        public string RooftopKey = string.Empty;
        private Status _oStatus = null;

        public string VehicleKey
        {
            get
            {
                return _vehiclekey;
            }
            set
            {
                _vehiclekey = value;
            }
        }

        public string VehicleIndex
        {
            get
            {
                return _vehicleIndex;
            }
            set
            {
                _vehicleIndex = value;
            }
        }

        public string VideoGUID
        {
            get
            {
                return _videoGUID;
            }
            set
            {
                _videoGUID = value;
            }
        }

        private string _videoTitle = string.Empty;
        public string VideoTitle
        {
            get
            {
                return _videoTitle;
            }
            set
            {
                _videoTitle = value;
            }
        }

        private string _videoDesc = string.Empty;
        public string VideoDescription
        {
            get
            {
                return _videoDesc;
            }
            set
            {
                _videoDesc = value;
            }
        }

        private string _isDefault = string.Empty;
        public string IsDefault
        {
            get
            {
                return _isDefault;
            }
            set
            {
                _isDefault = value;
            }
        }

        public Status OStatus
        {
            get
            {
                return _oStatus;
            }
            set
            {
                _oStatus = value;
            }
        }
       
        public VideoInfo()
        {
            InitializeComponent();
        }

     

        private void btnAddVideo_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                OpenFileDialog ofDialog = new OpenFileDialog();
                ofDialog.Title = ResourceTxt.selectVideoFile;
                ofDialog.InitializeLifetimeService();

                string strInitialDir = Common.GetVideoSettingInfo("InputVideoLocation");

                if (!string.IsNullOrEmpty(strInitialDir))
                {
                    ofDialog.InitialDirectory = strInitialDir;
                }
                else
                {
                    System.Windows.Forms.MessageBox.Show("Input Video Location not correct.\nPlease check the Settings and correct the Path");
                }

                ofDialog.Filter = "All files (*.*)|*.*|All files (*.*)|*.*";
                ofDialog.RestoreDirectory = true;

                if (ofDialog.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
                    return;

                txtFileName.Text = ofDialog.FileName;
                btnNext.Visibility = Visibility.Visible;
            }
            catch (Exception ex)
            {
                Common.WriteLog(ex.Message);
            }
        }

        private void btnNext_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(txtTitle.Text))
            {
                lblVideoTitleError.Visibility = Visibility.Visible;
                return;
            }

            lblError.Visibility = Visibility.Hidden;
            btnNext.Visibility = Visibility.Hidden;

            VideoGUID = GetVideoGuid(RooftopKey, VehicleKey);

            if (string.IsNullOrEmpty(VideoGUID))
            {
                lblError.Visibility = Visibility.Visible;
                btnNext.Visibility = Visibility.Visible; ;

                return;
            }

            VideoFileName = txtFileName.Text;

            VideoTitle = txtTitle.Text;
            VideoDescription = txtDescription.Text;
            IsDefault = chkDefaultVideo.IsChecked.ToString();

            GenerateVideoInfoXml();

            this.Close();
        }
        public string GetVideoGuid(string rooftopKey, string vehicleKey)
        {
            XmlNodeReader reader = null;
            string videoGUID = null;

            try
            {
                //var encoding = new ASCIIEncoding();
                var postData = "ACTION=CREATEVIDEO";

                postData += ("&rooftop_key=" + rooftopKey);
                postData += ("&VEHKEY=" + vehicleKey);

                string serverData = Common.GetServerData(postData);

                if (string.IsNullOrEmpty(serverData))
                {
                    Common.WriteLog("GetVideoGUID: No Data found");
                    return null;
                }

                if (serverData.Equals("WebError"))
                {
                    lblError.Content = ResourceTxt.GetServerData_WebError;
                    return null;
                }
                else if (serverData.Equals("Error"))
                {
                    lblError.Content = ResourceTxt.GetServerData_Error;
                    return null;
                }

                XmlDocument xDoc = new XmlDocument();
                xDoc.LoadXml(serverData);

                reader = new XmlNodeReader(xDoc);

                // Read all the data in the XML document and display it.
                while (reader.Read())
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {   // Keep track of the element that the user is on.
                        if (reader.Name == "guid")
                        {
                            reader.Read();
                            if (reader.NodeType == XmlNodeType.Text)
                            {
                                videoGUID = reader.Value;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Common.WriteLog("GetVideoGUID: " + ex.Message);
                videoGUID = null;
            }
            finally
            {
                // Do the necessary clean up.
                if (reader != null)
                    reader.Close();
            }

            return videoGUID;
        }

        public void GenerateVideoInfoXml()
        {
            try
            {
                string xmlPath = Common.VideoInfoFile;
                XmlDocument doc = null;
                XmlNode vehiclesNode = null;

                if (File.Exists(xmlPath))
                {
                    doc = new XmlDocument();
                    doc.Load(xmlPath);

                    vehiclesNode = doc.SelectSingleNode("Vehicles");
                }
                else
                {
                    doc = new XmlDocument();
                    XmlNode docNode = doc.CreateXmlDeclaration("1.0", "UTF-8", null);
                    doc.AppendChild(docNode);

                    vehiclesNode = doc.CreateElement("Vehicles");
                    doc.AppendChild(vehiclesNode);
                }

                XmlNode vehicleNode = doc.CreateElement("Vehicle");
                XmlAttribute indexAttr = doc.CreateAttribute("index");
                indexAttr.Value = VehicleIndex;
                vehicleNode.Attributes.Append(indexAttr);

                XmlAttribute keyAttribute = doc.CreateAttribute("Key");
                keyAttribute.Value = VehicleKey;
                vehicleNode.Attributes.Append(keyAttribute);

                XmlAttribute titleAttribute = doc.CreateAttribute("Title");
                titleAttribute.Value = txtTitle.Text;
                vehicleNode.Attributes.Append(titleAttribute);

                XmlAttribute descAttribute = doc.CreateAttribute("Description");
                descAttribute.Value = txtDescription.Text;
                vehicleNode.Attributes.Append(descAttribute);

                XmlAttribute VideoGUIDArttr = doc.CreateAttribute("VideoGUID");
                VideoGUIDArttr.Value = VideoGUID;
                vehicleNode.Attributes.Append(VideoGUIDArttr);

                XmlAttribute defVideoAttr = doc.CreateAttribute("DefaultVideo");
                if (chkDefaultVideo.IsChecked==true)
                {
                    defVideoAttr.Value = "True";

                }
                else
                {
                    defVideoAttr.Value = "False";
                }

                vehicleNode.Attributes.Append(defVideoAttr);
                vehiclesNode.AppendChild(vehicleNode);
                doc.Save(xmlPath);
            }
            catch (Exception ex)
            {
                Common.WriteLog("Error occurred while Generating Vedio Information XML");
                Common.WriteLog(ex.Message);
            }
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void button2_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            this.DragMove();
        }
    }
}
